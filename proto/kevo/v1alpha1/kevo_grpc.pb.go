// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kevo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KevoServiceClient is the client API for KevoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KevoServiceClient interface {
	SendImage(ctx context.Context, in *SendImageRequest, opts ...grpc.CallOption) (*SendImageResponse, error)
}

type kevoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKevoServiceClient(cc grpc.ClientConnInterface) KevoServiceClient {
	return &kevoServiceClient{cc}
}

func (c *kevoServiceClient) SendImage(ctx context.Context, in *SendImageRequest, opts ...grpc.CallOption) (*SendImageResponse, error) {
	out := new(SendImageResponse)
	err := c.cc.Invoke(ctx, "/kevo.v1alpha1.KevoService/SendImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KevoServiceServer is the server API for KevoService service.
// All implementations should embed UnimplementedKevoServiceServer
// for forward compatibility
type KevoServiceServer interface {
	SendImage(context.Context, *SendImageRequest) (*SendImageResponse, error)
}

// UnimplementedKevoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKevoServiceServer struct {
}

func (UnimplementedKevoServiceServer) SendImage(context.Context, *SendImageRequest) (*SendImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendImage not implemented")
}

// UnsafeKevoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KevoServiceServer will
// result in compilation errors.
type UnsafeKevoServiceServer interface {
	mustEmbedUnimplementedKevoServiceServer()
}

func RegisterKevoServiceServer(s grpc.ServiceRegistrar, srv KevoServiceServer) {
	s.RegisterService(&KevoService_ServiceDesc, srv)
}

func _KevoService_SendImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KevoServiceServer).SendImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kevo.v1alpha1.KevoService/SendImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KevoServiceServer).SendImage(ctx, req.(*SendImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KevoService_ServiceDesc is the grpc.ServiceDesc for KevoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KevoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kevo.v1alpha1.KevoService",
	HandlerType: (*KevoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendImage",
			Handler:    _KevoService_SendImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kevo/v1alpha1/kevo.proto",
}
